---
- name: Job Execution Block
  block:
    - name: Get Node Details
      kubernetes.core.k8s_info:
        kind: Node
        name: "{{ targetNode }}"
      register: nodeResource

    - name: Set MutexRuleList Fact
      ansible.builtin.set_fact:
        mutexRuleList: "{{ nodeResource | community.general.json_query(query) }}"
      vars:
        query: "resources[0].metadata.labels.keys(@) | [?starts_with(@,'mutexrule')]"

    - name: Get Rule Details
      ansible.builtin.set_fact:
        nodeMutexRulesItem: "{{ mutexRules | community.general.json_query(query) }}"
      vars:
        itemName: "{{ item | split('/') | last | split('.') | first }}"
        itemNamespace: "{{ item | split('/') | last | split('.') | last }}"
        query: "results[?resources[?metadata.name=='{{ itemName }}' && metadata.namespace=='{{ itemNamespace }}']]"
      loop: "{{ mutexRuleList }}"
      register: nodeMutexRulesResults

    - name: Set List
      ansible.builtin.set_fact:
        nodeMutexRules: "{{ nodeMutexRulesResults.results | map(attribute='ansible_facts.nodeMutexRulesItem') | list | flatten(2) }}"

    - name: Stage Job Updates
      ansible.builtin.set_fact:
        update_list: "{{ update_list + update }}"
      loop: "{{ nodeMutexRules }}"
      loop_control:
        index_var: loopIndex
      vars:
        update_list: []
        update:
          - path: "nodeMutexRules[{{loopIndex}}].resources[0].spec.jobSpec.template.spec.containers[0].env"
            value:
              - name: NODE_NAME
                value: "{{ targetNode }}"
              - name: MUTEX_RULE
                value: "{{ nodeMutexRules[loopIndex].resources[0].metadata.name }}"
          - path: "nodeMutexRules[{{loopIndex}}].resources[0].spec.jobSpec.template.spec.affinity"
            value:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                  - matchExpressions:
                    - key: kubernetes.io/hostname
                      operator: NotIn
                      values:
                      - "{{ targetNode }}"

    - name: Commit Job Updates
      ansible.utils.update_fact:
        updates: "{{ update_list }}"
      register: updatedK8sMutexRules

    - name: Launch K8s Jobs
      kubernetes.core.k8s:
        api_version: "batch/v1"
        kind: Job
        generate_name: "{{ item.resources[0].spec.jobName }}-"
        namespace: "{{ item.resources[0].spec.jobNamespace }}"
        definition:
          spec: "{{ item.resources[0].spec.jobSpec }}"
        state: present
        wait: true
        wait_condition:
          status: "True"
          type: "Complete"
      loop: "{{ updatedK8sMutexRules.nodeMutexRules }}"

    - name: Report Job Run Finish
      operator_sdk.util.k8s_status:
        api_version: "openshift-optional.skrzypek.io/v1alpha1"
        kind: MutexRunConfig
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
          - type: JobRun
            status: "True"
            reason: JobRunSucceeded
            message: |-
              Jobs for {{ targetNode }} have run successfully.
              Node is {{ ansible_loop.index }} of {{ ansible_loop.length }}
            lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"

    - name: Clear JSON_Patch Fact
      ansible.builtin.set_fact:
        jsonPatch: []

    - name: Set JSON_Patch Fact
      ansible.builtin.set_fact:
        jsonPatch: "{{ jsonPatch + [{'op': 'remove','path': '/metadata/labels/' + (item | regex_replace('/','~1')) }] }}"
      loop: "{{ mutexRuleList }}"

    - name: Remove Mutex Labels
      kubernetes.core.k8s_json_patch:
        kind: Node
        api_version: "v1"
        name: "{{ targetNode }}"
        patch: "{{ jsonPatch }}"

    - name: Wait Until Node Version Matches Desired Version
      kubernetes.core.k8s_info:
        api_version: "v1"
        kind: Node
        name: "{{ targetNode }}"
      register: actual_version
      until: desired_version == ( actual_version.resources[0].metadata.labels['machineconfiguration.openshift.io/release-image-version'] | default('0.0.0') )
      retries: 100
      delay: 60

    - name: Report Upgrade Finish
      operator_sdk.util.k8s_status:
        api_version: "openshift-optional.skrzypek.io/v1alpha1"
        kind: MutexRunConfig
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
          - type: NodeUpgrade
            status: "True"
            reason: NodeUpgradeSucceeded
            message: |-
              Upgrade for {{ targetNode }} has run successfully.
              Node is {{ ansible_loop.index }} of {{ ansible_loop.length }}
            lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"

    - name: Report Upgrade Unavailable (Finished)
      operator_sdk.util.k8s_status:
        api_version: "openshift-optional.skrzypek.io/v1alpha1"
        kind: MutexRunConfig
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
          - type: UpgradeAvailable
            status: "False"
            reason: "UpgradeUnavailable"
            message: An upgrade is not available.
            lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"
      when:
      - ansible_loop.last

  rescue:
    - name: Report Job Run Failure
      operator_sdk.util.k8s_status:
        api_version: "openshift-optional.skrzypek.io/v1alpha1"
        kind: MutexRunConfig
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        when: ansible_failed_task.name == 'Launch K8s Jobs'
        conditions:
          - type: JobRun
            status: "False"
            reason: JobRunFailed
            message: |-
              Jobs for {{ targetNode }} have run not successfully.
              Node is {{ ansible_loop.index }} of {{ ansible_loop.length }}
            lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"

    - name: Report Upgrade Failure
      operator_sdk.util.k8s_status:
        api_version: "openshift-optional.skrzypek.io/v1alpha1"
        kind: MutexRunConfig
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        when: ansible_failed_task.name == 'Wait Until Node Version Matches Desired Version'
        conditions:
          - type: NodeUpgrade
            status: "False"
            reason: NodeUpgradeFailed
            message: |-
              Upgrade for {{ targetNode }} has run not successfully.
              Node is {{ ansible_loop.index }} of {{ ansible_loop.length }}
            lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"

    - name: Break Loop
      ansible.builtin.fail:
        msg: "Failed to run job or upgrade node."

  always:
    - name: Set JobRun
      ansible.builtin.set_fact:
        JobRun: "{{ (ansible_failed_result is not defined) | ternary('true', 'false') }}"
