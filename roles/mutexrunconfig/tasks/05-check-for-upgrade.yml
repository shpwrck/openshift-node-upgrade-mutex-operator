---
- name: Upgrade Check Block
  block:
    - name: Gather ClusterVerion Info
      kubernetes.core.k8s_info:
        api_version: "config.openshift.io/v1"
        kind: ClusterVersion
        name: version
      register: version

    - name: Set MCP Facts
      ansible.builtin.set_fact:
        desired_version: "{{ version | community.general.json_query(dv_query) }}"
        version_history: "{{ version | community.general.json_query(vh_query) }}"
      vars:
        dv_query: 'resources[*].spec.desiredUpdate.version | [0]'
        vh_query: 'resources[*].status.history[0].state | [0]'

    - name: Gather Node Info
      kubernetes.core.k8s_info:
        api_version: "v1"
        kind: Node
      register: nodes

    - name: Set Worker Node Version Facts
      ansible.builtin.set_fact:
        worker_node_version: "{{ nodes | community.general.json_query(query) }}"
      vars:
        query: >-
          resources[?(metadata.labels."node-role.kubernetes.io/worker"=='')].metadata.labels."machineconfiguration.openshift.io/release-image-version"

    - name: Compare 'desired_version' to 'worker_node_version' for each worker node
      ansible.builtin.set_fact:
        version_skew: "true"
      loop: "{{ worker_node_version }}"
      when: item is version( desired_version, 'lt', version_type='semver' )

    - name: Determine state of upgrade
      ansible.builtin.set_fact:
        controlplane_ready: "true"
      when: version_history == "Completed"

    - name: Report Upgrade Exists
      operator_sdk.util.k8s_status:
        api_version: "openshift-optional.skrzypek.io/v1alpha1"
        kind: MutexRunConfig
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        status:
          upgrade: "{{ version_skew is defined and controlplane_ready is defined | ternary('available','unavailable') }}"
      when: version_skew is defined and controlplane_ready is defined

    - name: Set Worker Nodes Upgradeable
      ansible.builtin.set_fact:
        UpgradeAvailable: "{{ (version_skew is defined and controlplane_ready is defined) | ternary('True', 'False') }}"

    - name: Report Upgrade Check Success
      operator_sdk.util.k8s_status:
        api_version: "openshift-optional.skrzypek.io/v1alpha1"
        kind: MutexRunConfig
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
          - type: UpgradeChecked
            status: "True"
            reason: "CheckSucceeded"
            message: Upgrade Check was run successfully.
            lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"

  rescue:
    - name: Report Upgrade Check Failure
      operator_sdk.util.k8s_status:
        api_version: "openshift-optional.skrzypek.io/v1alpha1"
        kind: MutexRunConfig
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
          - type: UpgradeChecked
            status: "False"
            reason: "CheckFailed"
            message: Upgrade Check was not run successfully.
            lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"

  always:
    - name: Set Upgrade Check
      ansible.builtin.set_fact:
        UpgradabilityChecked: "{{ (ansible_failed_result is not defined) | ternary('true', 'false') }}"